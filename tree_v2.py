# -*- coding: utf-8 -*-
"""Tree_v2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JX_ON3yAwTOFKfjgabrZQwZdLQe-qr9Z

#Introdução

#Árvores em Python: O que são e como se organizam.

(versão keler )Uma Tree é uma estrutura de dados que tem como principal utilidade o fato de cada dado estar ligado a outro de forma hierarquica. 
De certa forma, as Trees se organizam como as árvores da natureza, tanto que daí vem o nome "Tree", com a diferença de começarem a partir das raízes e irem descendo até as folhas, como uma "árvore invertida".


(versão italo)Quando vemos uma árvore no dia-a-dia, as raízes estão normalmente abaixo do solo e as folhas acima, no ar. Além disso, os galhos da árvore se ramificam a partir da raíz em uma certa ordem. Vale lembrar que as árvores não são estruturas de dados sequencias, ela é organizada como uma árvore, com a diferença de que a raíz está no topo e as folhas na base, uma "árvore invertida".


![Upside down tree model](https://cdn-images-1.medium.com/max/347/1*h3koGce0YA7XP_xuAcZisg.png "Exemplo ilustratório")

A palavra "árvore" ("*tree*", em inglês) é usada na computação quando falamos de uma forma em que os dados podem ser organizados. Nas árvores, temos nódulos ("*nodes*", em inglês) com ligações para outros nodes, e eles são os dados que queremos organizar. A raíz, "*root*", é o nódulo original, de onde todos os outros partem. Os termos "*child*" (plural "*children*"), "*parent*" (plural "*parents*") e "sibling" (plural "*siblings*") correspondem a "filho", "pai" e "irmão", respectivamente, e server para ilustrar a idéia da organização vertical de uma arvore, onde os nodes que dão origem a outros (abaixo dele) são "pais", os que surgem dele, seus "filhos" e filhos de um mesmo pai são "irmãos". Por fim, "*leaf*" (plural "*leaves*") é o termo usado para um node "final" que não é pai de nenhum outro, da mesma forma que não surgem galhos a partir das folhas de uma árvore.  Nas árvores, cada node ***pode*** ter um ou mais nodes abaixo dele (filhos) mas somente um acima (pai).

![Model](https://i.ytimg.com/vi/qH6yxkw0u78/maxresdefault.jpg "Esquema de uma 'tree'")

Python não tem um suporte já pronto para essa estrutura de dados, então iremos usar uma biblioteca para facilitar o aprendizado de como as trees são usadas. A biblioteca selecionada para ser usada nesse tutorial é "*[anytree](https://pypi.org/project/anytree/)*". ***(como python depende de bibliotecas para usar trees, os comandos variam dependendo de sua escolha e são de menor importância para seu aprendizado)***

***É DE EXTREMA IMPORTÂNCIA QUE O CÓDIGO ABAIXO SEJA RODADO***
"""

#SEMPRE rode isso quando abrir o notebook para garantir que irá funcionar apropriadamente
!pip install anytree
!pip install anytree --user

"""#Métodos

Para começar, devemos importar alguns certos elementos de nossa biblioteca. Ative a cécula abaixo para prosseguir:
"""

from anytree import Node, RenderTree

"""Agora podemos começar a programar! Vamos começar criando um *node*. A sintaxe usada pela "anytree" é:
> `~node-name~ = Node(~node-data~, parent = ~node-parent~)`
"""

pessoas = Node("Pessoas no IMD") #criando o node root

"""Note que 'pessoas' em minúsculo é o nome pelo qual iremos identificar o node dentro do código, e a string 'Pessoas no IMD' é o conteúdo de tal node. Percebeu que faltou a parte 
> ' `, parent = ~node-parent~` ' ?

Como estamos criando o primeiro node, o root, ele não pode/deve ter nenhum pai.

Agora, vamos criar mais nodes para preencher nossa árvore!
"""

estudantes = Node("Estudantes", parent = pessoas)                           #

aluno_1 = Node("Aluno 1", parent = estudantes)                              #

elementos_pessoais = Node("Informações pessoais", parent = aluno_1)      # 
elementos_academicos = Node("Dados academicos", parent = aluno_1)        #

matricula = Node(123456789, parent = elementos_pessoais)                    #
nome = Node("Joãozinho", parent = elementos_pessoais)                       #
endereco = Node("Rua dos bobos nº0", parent = elementos_pessoais)           #

cursos = Node("Disciplinas", parent = elementos_academicos)                 #
projetos = Node("Projetos acadêmicos", parent = elementos_academicos)       #

edb =  Node("Estrutura de Dados Básicas", parent = cursos)                  #
fmc2 = Node("FMC II", parent = cursos)                                      #
lp1 = Node("Linguagem de Programação I", parent = cursos)                   #

"""Vejamos como ficou nossa Tree estudantes"""

print(RenderTree(estudantes)) #usamos a função RenderTree para printar nossa Tree. Usamos como parâmetro o primeiro Node que desejamos printar, e a função vai printar ele e todas as suas Children

"""Outro exemplo mais complexo, usando a hierarquia do exercito brasileiro:"""

subtenente=Node("Subtenente",salario="6169,00",categoria="Praças")
primeiro_sargento=Node("Primeiro Sargento",salario="5483,00",categoria="Praças",parent=subtenente)
segundo_sargento=Node("Segundo Sargento",salario="4770,00",categoria="Praças",parent=primeiro_sargento)
terceiro_sargento=Node("Terceiro Sargento",salario="3825,00",categoria="Praças",parent=segundo_sargento)
taifeiro_mor=Node("taifeiro_mor",salario="2627,00",categoria="Praças",parent=terceiro_sargento)
cabo=Node("cabo",salario="2627,00",categoria="Praças",parent=terceiro_sargento)
taifeiro_1classe=Node("taifeiro de primeira classe",salario="2325,00",categoria="Praças",parent=taifeiro_mor)
soldado=Node("Soldado",salario="1560,00",categoria="Praças",parent=cabo)
taifeiro_2classe=Node("taifeiro de segunda classe",salario="2210,00",categoria="Praças",parent=taifeiro_1classe)

"""Vejamos como ficou:
(lembrando que isso é só uma aproximação da hierarquia militar)
"""

print(RenderTree(subtenente))

"""Note que não temos nenhum oficial em nossa Tree, para corrigir isso devemos colocar alguem com patente acima de subtentente, ou seja: devemos adicionar um Parent ao Node subtenente."""

primeiro_tenente=Node("Primeiro tenente",salario="7796,00",categoria="Oficiais subalternos")
segundo_tenente=Node("Segundo tenente",salario="7490,00",categoria="Oficiais subalternos",parent=primeiro_tenente)
aspirante_a_oficial=Node("Aspirante a oficial",salario="6993,00",categoria="Oficiais subalternos",parent=segundo_tenente)
#agora adicionando os oficiais à nossa tree:
subtenente.parent=aspirante_a_oficial

print(RenderTree(primeiro_tenente))

"""Mas digamos que eu tenha acabado de ser promovido para segundo sargento e só queira saber quem eu vou mandar limpar o chão, vejamos quem seriam os candidatos:"""

print(RenderTree(segundo_sargento))

"""#Exercícios

##Exercícios introdutórios

Vamos criar uma árvore simples. Para começar, devemos importar os seguintes elementos:
"""

from anytree import Node, RenderTree

"""***Primeiro exercício: ***

   Faça uma Tree com as últimas três gerações masculinas de sua família (seu avô, tios-avô, pai, tios, etc...)
"""

#primeiro exercício

"""Antes de seguirmos para o próximo exercício, vamos introduzir um outro tipo de Node, o AnyNode. A única diferença em relação a estrutura é que enquanto o Node demanda obrigatoriamente um nome, o AnyNode não o faz. Além disso o AnyNode tem uma forma de printar um pouco diferente."""

from anytree import AnyNode, RenderTree

diretor = AnyNode(cargo="rei",função="mandar em geral")
professor = AnyNode(cargo="executor",função="executar servos e escravos",parent=diretor)
alunos_veteranos = AnyNode(cargo="servo",função="trabalhar concientemente",parent=professor)
alunos_calouros = AnyNode(cargo="escravo",função="trabalhar ingênuamente",parent=professor)
print(RenderTree(diretor))

"""***Segundo exercício:***

Monte uma Tree baseado na imagem a seguinte. Ela contém a hierarquia de um grupo mafioso asiático conhecido como Triad.
![exercicio2](https://i2.wp.com/www.estilogangster.com.br/wp-content/uploads/2017/12/mafia-chinesa-triade.jpg?resize=662%2C473 "hierarquia triad")
"""

#segundo exercício

"""Agora vamos aprender outra forma, uma mais rápida, de criar Trees. 


O método children(usando como exemplo uma versão simplificada  da hierarquia católica):
"""

from anytree import AnyNode, RenderTree
Papa = AnyNode(nome="Papa",children=[
    AnyNode(nome="Arcebispo",children=[
        AnyNode(nome="Bispo",children=[
            AnyNode(nome="Padre Vigário"),AnyNode(nome="Padre Paroco",children=[AnyNode(nome="fiéis")
            ])
        ])
    ])
])
print(RenderTree(Papa))